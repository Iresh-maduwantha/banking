name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd banking-saas-app/frontend
        npm ci
    
    # SAST - Static Application Security Testing
    - name: Run SAST with SonarQube
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=banking-saas-app
          -Dsonar.sources=banking-saas-app/frontend/src
          -Dsonar.tests=banking-saas-app/frontend/src
          -Dsonar.javascript.lcov.reportPaths=banking-saas-app/frontend/coverage/lcov.info
          -Dsonar.testExecutionReportPaths=banking-saas-app/frontend/test-report.xml
    
    # SCA - Software Composition Analysis
    - name: Run SCA with npm audit
      run: |
        cd banking-saas-app/frontend
        npm audit --json > npm-audit.json || true
    
    - name: Upload SCA results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: npm-audit-results
        path: banking-saas-app/frontend/npm-audit.json
    
    # DAST - Dynamic Application Security Testing
    - name: Run DAST with OWASP ZAP
      uses: zaproxy/action-full-scan@v0.9.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Upload DAST results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: zap-results
        path: zap-results
    
    # Quality Gates
    - name: Check Quality Gates
      run: |
        # This is a placeholder for quality gate checks
        # In a real implementation, you would check the results of SAST, SCA, and DAST
        # and fail the workflow if they don't meet your quality standards
        echo "Checking quality gates..."
        
        # Example: Check if npm audit found critical vulnerabilities
        if [ -f "banking-saas-app/frontend/npm-audit.json" ]; then
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' banking-saas-app/frontend/npm-audit.json)
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "Critical vulnerabilities found: $CRITICAL_VULNS"
            exit 1
          fi
        fi
        
        echo "Quality gates passed!" 